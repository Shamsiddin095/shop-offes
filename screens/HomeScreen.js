import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
  FlatList,
  Platform,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Speech from 'expo-speech';
import Constants from 'expo-constants';
import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';
import Voice from '@react-native-community/voice';

const API_URL = Constants.expoConfig.extra.API_URL;

export default function HomeScreen({ navigation }) {
  const [user, setUser] = useState(null);
  const [mijoz, setMijoz] = useState('');
  const [telefon, setTelefon] = useState('+998');
  const [summa, setSumma] = useState('');
  const [qarzlar, setQarzlar] = useState([]);
  const [voiceStep, setVoiceStep] = useState(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const fetchUser = async () => {
      const storedUser = await AsyncStorage.getItem('user');
      if (storedUser) {
        const u = JSON.parse(storedUser);
        setUser(u);
        Speech.speak(`–ü—Ä–∏–≤–µ—Ç, ${u.ism}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!`, {
          language: 'ru-RU',
        });
      }
    };
    fetchUser();
    fetchQarzlar();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π Voice
    Voice.onSpeechResults = onSpeechResults;
    Voice.onSpeechError = onSpeechError;

    return () => {
      Voice.destroy().then(Voice.removeAllListeners);
    };
  }, []);

  const handleLogout = async () => {
    try {
      await AsyncStorage.removeItem('user');
      Speech.speak('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', { language: 'ru-RU' });
      navigation.replace('Login');
    } catch (error) {
      console.error(error);
      Alert.alert('‚ùå –û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    }
  };

  const fetchQarzlar = async () => {
    try {
      const res = await fetch(`${API_URL}/qarz/all`);
      const text = await res.text();
      let data;
      try {
        data = JSON.parse(text);
      } catch (err) {
        console.error('JSON parse error:', text);
        return;
      }
      if (res.status === 200) setQarzlar(data);
    } catch (error) {
      console.error(error);
      Alert.alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤');
    }
  };

  const handleAddQarz = async (m = mijoz, t = telefon, s = summa) => {
    if (!m || !t || !s) {
      Speech.speak('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Å—É–º–º—É!', {
        language: 'ru-RU',
      });
      return;
    }
    try {
      const res = await fetch(`${API_URL}/qarz/add`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ mijoz: m, telefon: t, summa: Number(s) }),
      });
      const data = await res.json();
      if (res.status === 200) {
        Speech.speak(`–î–æ–ª–≥ ${s} —Ä—É–±. –¥–æ–±–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É ${m}`, {
          language: 'ru-RU',
        });
        setMijoz('');
        setTelefon('+998');
        setSumma('');
        fetchQarzlar();
      } else {
        Speech.speak('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { language: 'ru-RU' });
        Alert.alert('‚ùå –û—à–∏–±–∫–∞', data.message);
      }
    } catch (error) {
      console.error(error);
      Speech.speak('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', { language: 'ru-RU' });
    }
  };

  const handlePayQarz = async (mijozName) => {
    try {
      const res = await fetch(`${API_URL}/qarz/pay`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ mijoz: mijozName }),
      });
      const data = await res.json();
      if (res.status === 200) {
        Speech.speak(`–î–æ–ª–≥ –∫–ª–∏–µ–Ω—Ç–∞ ${mijozName} –æ–ø–ª–∞—á–µ–Ω`, {
          language: 'ru-RU',
        });
        fetchQarzlar();
      } else {
        Speech.speak('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { language: 'ru-RU' });
      }
    } catch (error) {
      console.error(error);
      Speech.speak('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', { language: 'ru-RU' });
    }
  };

  // –û–í–û–ó–û–í–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï
  const startVoiceCommand = async () => {
    if (Platform.OS === 'web') {
      Alert.alert(
        '–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö',
      );
      return;
    }
    try {
      await Voice.start('ru-RU');
    } catch (e) {
      console.error('Voice start error:', e);
      Speech.speak('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', {
        language: 'ru-RU',
      });
    }
  };

  const onSpeechResults = (event) => {
    const command = event.value[0].toLowerCase();
    console.log('Voice command:', command);

    if (voiceStep === 'ism') {
      setMijoz(command);
      setVoiceStep('telefon');
      Speech.speak('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', {
        language: 'ru-RU',
      });
      return;
    }
    if (voiceStep === 'telefon') {
      setTelefon(command.startsWith('+') ? command : '+998' + command);
      setVoiceStep('summa');
      Speech.speak('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ —Å—É–º–º—É –¥–æ–ª–≥–∞', {
        language: 'ru-RU',
      });
      return;
    }
    if (voiceStep === 'summa') {
      const cleanSum = command.replace(/\D/g, '');
      setSumma(cleanSum);
      handleAddQarz(mijoz, telefon, cleanSum);
      setVoiceStep(null);
      return;
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if (command.includes('–Ω–æ–≤—ã–π –¥–æ–ª–≥') || command.includes('–¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥')) {
      setVoiceStep('ism');
      Speech.speak('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞', {
        language: 'ru-RU',
      });
    } else if (command.includes('–¥–æ–ª–≥–∏')) {
      fetchQarzlar();
      Speech.speak('–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –¥–æ–ª–≥–æ–≤:', { language: 'ru-RU' });
      qarzlar.forEach((q) =>
        Speech.speak(`${q.mijoz} ${q.summa} —Ä—É–±.`, { language: 'ru-RU' }),
      );
    } else if (command.includes('–æ–ø–ª–∞—Ç–∏—Ç—å')) {
      const match = qarzlar.find((q) =>
        command.includes(q.mijoz.toLowerCase()),
      );
      if (match) handlePayQarz(match.mijoz);
      else if (qarzlar.length === 1) handlePayQarz(qarzlar[0].mijoz);
      else
        Speech.speak('–ö–∞–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å?', {
          language: 'ru-RU',
        });
    } else if (command.includes('–≤—ã—Ö–æ–¥') || command.includes('logout')) {
      handleLogout();
    } else {
      Speech.speak('–ö–æ–º–∞–Ω–¥—É –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ', { language: 'ru-RU' });
    }
  };

  const onSpeechError = (e) => {
    console.error('Speech error:', e);
    Speech.speak('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è', { language: 'ru-RU' });
  };

  return (
    <KeyboardAwareScrollView
      contentContainerStyle={styles.container}
      enableOnAndroid={true}
    >
      <Text style={styles.title}>üè† –ì–ª–∞–≤–Ω–∞—è</Text>
      <Text style={styles.subtitle}>
        –ü—Ä–∏–≤–µ—Ç {user?.ism || '–•–æ–∑—è–∏–Ω'}! –í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É üéâ
      </Text>

      <TouchableOpacity style={styles.voiceButton} onPress={startVoiceCommand}>
        <Text style={styles.buttonText}>üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</Text>
      </TouchableOpacity>

      <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
        <Text style={styles.buttonText}>–í—ã—Ö–æ–¥</Text>
      </TouchableOpacity>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–ª–≥</Text>
        <TextInput
          style={styles.input}
          placeholder="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞"
          value={mijoz}
          onChangeText={setMijoz}
        />
        <TextInput
          style={styles.input}
          placeholder="+998912345678"
          value={telefon}
          onChangeText={setTelefon}
        />
        <TextInput
          style={styles.input}
          placeholder="–°—É–º–º–∞ –¥–æ–ª–≥–∞"
          value={summa}
          onChangeText={setSumma}
          keyboardType="numeric"
        />
        <TouchableOpacity style={styles.button} onPress={() => handleAddQarz()}>
          <Text style={styles.buttonText}>–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥</Text>
        </TouchableOpacity>
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>–°–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤</Text>
        <FlatList
          data={qarzlar}
          keyExtractor={(item) => item._id}
          renderItem={({ item }) => (
            <View style={styles.qarzItem}>
              <Text style={styles.qarzText}>
                {item.mijoz} ({item.telefon}) - {item.summa} —Ä—É–±.
              </Text>
              <TouchableOpacity
                style={styles.payButton}
                onPress={() => handlePayQarz(item.mijoz)}
              >
                <Text style={styles.buttonText}>–û–ø–ª–∞—Ç–∏—Ç—å</Text>
              </TouchableOpacity>
            </View>
          )}
          keyboardShouldPersistTaps="handled"
          nestedScrollEnabled={true}
        />
      </View>
    </KeyboardAwareScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flexGrow: 1, padding: 20, backgroundColor: '#f9f9f9' },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 10,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#555',
    marginBottom: 20,
    textAlign: 'center',
  },
  logoutButton: {
    backgroundColor: 'red',
    padding: 12,
    borderRadius: 5,
    marginBottom: 20,
    alignItems: 'center',
  },
  voiceButton: {
    backgroundColor: '#007bff',
    padding: 12,
    borderRadius: 5,
    marginBottom: 20,
    alignItems: 'center',
  },
  section: { marginBottom: 30 },
  sectionTitle: { fontSize: 18, fontWeight: 'bold', marginBottom: 10 },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
    backgroundColor: '#fff',
  },
  button: {
    backgroundColor: 'green',
    padding: 12,
    borderRadius: 5,
    alignItems: 'center',
  },
  payButton: {
    backgroundColor: '#007bff',
    padding: 8,
    borderRadius: 5,
    marginTop: 5,
    alignSelf: 'flex-start',
  },
  buttonText: { color: '#fff', fontWeight: 'bold' },
  qarzItem: {
    backgroundColor: '#e0f7fa',
    padding: 10,
    borderRadius: 5,
    marginBottom: 10,
  },
  qarzText: { fontSize: 16 },
});
